extends base

mixin navItem(link, text, icon, active)
  li(class=`${active ? 'side-nav--active' : ''}`)
    a(href=`${link}`)
      svg
        use(xlink:href=`img/icons.svg#icon-${icon}`)
      | #{text}

block content
  main.main
    .user-view
      nav.user-view__menu
        ul.side-nav
          +navItem('/me', 'Settings', 'settings', true)
          +navItem('/my-bookings', 'My bookings', 'briefcase')
          +navItem('/my-reviews', 'My reviews', 'star')
          +navItem('/billing', 'Billing', 'credit-card')

        - if (user.role === 'admin')
          .admin-nav
            h5.admin-nav__heading Admin
            ul.side-nav
              +navItem('#', 'Manage tours', 'map')
              +navItem('#', 'Manage users', 'users')
              +navItem('#', 'Manage reviews', 'star')
              +navItem('#', 'Manage bookings', 'briefcase')

      .user-view__content
        .user-view__form-container
          h2.heading-secondary.ma-bt-md Your account settings
          
          //- WITHOUT API
          //- form.form.form-user-data(action='/submit-user-data' method='POST' enctype='multipart/form-data')
          
          //- WITH API
          form.form.form-user-data
            .form__group
              label.form__label(for='name') Name
              input#name.form__input(type='text', value=`${user.name}`, required, name='name')
            .form__group.ma-bt-md
              label.form__label(for='email') Email address
              input#email.form__input(type='email', value=`${user.email}`, required, name='email')
            .form__group.form__photo-upload
              img.form__user-photo(src=`/img/users/${user && user.photo ? user.photo : 'default.jpg'}`, alt='User photo')
              input.form__upload(type='file', accept='image/*', id='photo', name='photo')
              label(for='photo') Choose new photo
            .form__group.right
              button.btn.btn--small.btn--green Save settings
              
        .line &nbsp;
        
        .user-view__form-container
          h2.heading-secondary.ma-bt-md Password change
          form.form.form-user-password
            .form__group
              label.form__label(for='password-current') Current password
              input#password-current.form__input(type='password', placeholder='••••••••', required, minlength='8')
            .form__group
              label.form__label(for='password') New password
              input#password.form__input(type='password', placeholder='••••••••', required, minlength='8')
            .form__group.ma-bt-lg
              label.form__label(for='password-confirm') Confirm password
              input#password-confirm.form__input(type='password', placeholder='••••••••', required, minlength='8')
            .form__group.right
              button.btn.btn--small.btn--green.btn--save-password Save password

  // Preview selected profile photo immediately
  script.
    (function(){
      const input = document.getElementById('photo');
      const img = document.querySelector('.form__user-photo');
      if (!input || !img) return;
      input.addEventListener('change', function(){
        const file = this.files && this.files[0];
        if (file) {
          const url = URL.createObjectURL(file);
          img.src = url;
        }
      });
    })();

  // Submit handler to persist photo and refresh preview with stored filename
  script.
    (function(){
      const form = document.querySelector('.form-user-data');
      if (!form) return;
      form.addEventListener('submit', async function(e){
        try {
          e.preventDefault();
          const btn = form.querySelector('button[type="submit"]');
          if (btn) btn.textContent = 'Saving...';
          const fd = new FormData();
          fd.append('name', document.getElementById('name').value);
          fd.append('email', document.getElementById('email').value);
          const file = document.getElementById('photo').files[0];
          if (file) fd.append('photo', file);
          const res = await fetch('/api/v1/users/updateMe', { method: 'PATCH', body: fd, credentials: 'same-origin' });
          const data = await res.json();
          if (!res.ok || !data || data.status !== 'success') {
            const msg = data && data.message ? data.message : 'Failed to save settings';
            throw new Error(msg);
          }
          const updated = data.data && data.data.user;
          const img = document.querySelector('.form__user-photo');
          if (updated && updated.photo && img) {
            img.src = `/img/users/${updated.photo}?t=${Date.now()}`;
          }
          if (btn) btn.textContent = 'Save settings';
          alert('Settings saved');
        } catch(err) {
          console.error(err);
          alert('Save failed: ' + err.message);
        }
      });
    })();
